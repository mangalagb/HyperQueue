
HyperQueue
=================================

This project uses
- Java 8
- Play 2.4
Make sure you have support for these before running the app.

To run the app,
1) Go to the directory where the app is stored
1) Run "activator"
2) Run "start -Dhttp.port=disabled -Dhttps.port=4430"

To run it as a standalone application,

1) Go to app/target/universal. There you will find 
	a ZIP file. It contains all JAR files needed to run the application.
	
2) Unzip the archive. If you are running it on Linux, the file does
	 not retain Unix file permissions so when the file is expanded 
	 the start script will be required to be set as an executable. Just type
	 chmod +x /path/to/bin/<project-name>
	 
3) Execute it as:
	 cd path/to/bin/
	 ./app
--------------------------------------------------------------------------------------

Anatomy of HyperQueue
=================================

- HyperQueue has support for three topics - flowers, animals and birds

- Users can post/view threads on these topics.

- If you are a producer and want to add an event on the flowers topic, type
	https://localhost:4430/flowers
	- You will be taken to a page where you can post messages to the topic.
	- To post on a different topic, type
		https://localhost:4430/topicname  
		where topicname can be any of the three available topics
		
- If you are a producer and want to view events in a particular topic, type
	https://localhost:4430/view/topicname
	where topicname can be any of the three available topics

--------------------------------------------------------------------------------------

Implemented artifacts
=================================

Producer Implementation
-----------------------

Already Implemented
1) Implemented https as the transport protocol. (By default, Play generates 
	itself a self signed certificate)
	
2) Based on the Url, the broker understands that the request corresponds 
	to a producer’s desire to add an event to the topic.
	
3) The event itself is encapsulated as an object. (See app/models/Event.java)

TODO
- a redirect button after posting a event to add more events



Consumer Implementation
-------------------------

Already Implemented

1) Consumers connect to brokers via GET requests and fetch events from them 
	so that a client can process these events and act on them (In this case,
	just display the event message) .
	
2) When a consumer connects to a broker for the first time it is assigned a
	 session ID.(Since PLAY is a stateless application, Session data is not 
	 stored by the server but is added to each subsequent HTTP 
	 request, using the cookie mechanism). This id is then verified at each 
	 subsequent GET requests to identify the user and maintain state information.
	 
3) If the session timeout period passes(default = 30 seconds .can be changed) ,
	the session is terminated with a message. To start a new session, the 
	user has to retype the url.
	 

Broker Implementation
-------------------------

1) Broker holds all events related to a topic in memory. It also stores 
	session ids and their progress through these events(in a HashTable).

2) There are mutiple topics with the broker (In this case, 
	3 topics - flowers, animals and birds). 

3) Multiple producers can connect to a single broker and they
	can all publish events simultaneously.

4) Multiple consumers can also consume data simultaneously. Their
	progress is tracked by using session ids.
	
TODO
Extra “Leetness” challenge: if a consumer is connecting for the first time, without a session ID, it can specify
to the broker whether it wants to begin consumption from the oldest offset in the queue (in the above case,
0), or the newest offset in the queue (in the above case 3) without actually sending the offset itself, simply by
sending an HTTP header like O FFSET with a value of either 1
(meaning oldest offset in the queue) or 1
(meaning the newest offset in the queue). Implement this for extra leetness points!

--------------------------------------------------------------------------------------
	
